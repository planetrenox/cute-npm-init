#!/usr/bin/env node
import packageJson from './package.json' assert { type: 'json' };
import fs from 'fs';
import path from 'path';
import { execSync } from 'child_process';

const isPR = () =>
{
    try {
        return execSync('npm whoami', {stdio: 'pipe'}).toString().trim() === 'planetrenox';
    }
    catch {
        return false;
    }
};

let packageName;
let cwd;
let srcDirPath;
function main()
{
    cwd = process.cwd();
    packageName = path.basename(cwd);
    srcDirPath = path.join(cwd, 'src');
    fs.mkdirSync(srcDirPath, {recursive: true});
    createPackageJson();
    createIndexJs();
    createCliJs();
    createNpmIgnore();
    createGitIgnore();
    createReadMe();
    createTestJs();
    createDotNpmrc();

    console.log(`Project initialization completed with cute-npm-init`);
}

function createPackageJson()
{
    console.log("cute-npm-init v" + packageJson.version);
    const packageJsonPath = path.join(cwd, 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
        const packageJson = {
            name: packageName, version: "0.1.0",
            description: "Experimental piercer stronghold. No tests.",
            type: "module",
            main: "src/index.js",
            bin: {
                [packageName]: "src/cli.js"
            },
            scripts: {
                "test": "node ./src/test.js",
                "cli": "node ./src/cli.js",
                "build": `npx rollup src/index.js > cdn.piercer.js`,
                "prepublishOnly": `npm run build`
            },
            keywords: ["cute"],
            author: isPR() ? 'planetrenox' : '',
            license: "CC-BY-4.0",
            homepage: isPR() ? 'https://bit.ly/incessant-vibration' : '',
            repository: isPR() ? `git+https://github.com/planetrenox/${packageName}.git` : `git+https://github.com/user/${packageName}.git`,
            unpkg: "piercer.js",
        };
        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        console.log("Generated package.json with cute defaults.");
    }
}

function createIndexJs()
{
    const indexJsPath = path.join(srcDirPath, 'index.js');
    if (!fs.existsSync(indexJsPath)) {
        fs.writeFileSync(indexJsPath, `export const main = () => console.log("test.");
`);
        console.log("Generated index.js with cute defaults. For quick testing: npm run test");
    }
}

function createCliJs()
{
    const cliJsPath = path.join(srcDirPath, 'cli.js');
    if (!fs.existsSync(cliJsPath)) {
        const cliJsContent = `#!/usr/bin/env node
//import { program } from 'commander';
console.log("Running", "${packageName}!");
console.log("or npm run test");

// program
// .description("accepts 0 or 1 arguments")
// .arguments("[optionalArg]")
// .action((optionalArg) => {
//  switch (optionalArg) {
//             case 'op1':
//                 !true = !false;
//                 break;
//             case 'op2':
//                 !true = !false;
//                 break;
//         }
// });
// program.parse(process.argv);
`;
        fs.writeFileSync(cliJsPath, cliJsContent);
        console.log("Generated cli.js with CLI functionality. For placeholder testing: npm run cli");
    }
}

function createNpmIgnore()
{
    const npmIgnorePath = path.join(cwd, '.npmignore');
    if (!fs.existsSync(npmIgnorePath)) {
        const npmIgnoreContent = `**/.DS_Store
**/Thumbs.db
*.log
node_modules/
.env
coverage/
dist/
*.test.js
*.spec.js
tests/
__tests__/
test/
.git/
.github/
.gitlab/
.idea/
*.config.js
`;
        fs.writeFileSync(npmIgnorePath, npmIgnoreContent);
        console.log("Generated .npmignore with cute defaults.");
    }
}

function createGitIgnore()
{
    const gitIgnorePath = path.join(cwd, '.gitignore');
    if (!fs.existsSync(gitIgnorePath)) {
        const gitIgnoreContent = `**/.git
.idea
package-lock.json
cdn.piercer.js
        
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
`;
        fs.writeFileSync(gitIgnorePath, gitIgnoreContent);
        console.log("Generated .gitignore with cute npm defaults.");
    }
}

function createReadMe()
{
    const readMePath = path.join(cwd, 'readme.md');
    if (!fs.existsSync(readMePath)) {
        const readMeContent = `[available on npmjs](https://www.npmjs.com/package/${packageName})
\`\`\`
    npm install ${packageName}
\`\`\`
\`\`\`javascript
\`⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀
⢸⠉⣹⠋⠉⢉⡟⢩⢋⠋⣽⡻⠭⢽⢉⠯⠭⠭⠭⢽⡍⢹⡍⠙⣯⠉⠉⠉⠉⠉⣿⢫⠉⠉⠉⢉⡟⠉⢿⢹⠉⢉⣉⢿⡝⡉⢩⢿⣻⢍⠉⠉⠩⢹⣟⡏⠉⠹⡉⢻⡍⡇
⢸⢠⢹⠀⠀⢸⠁⣼⠀⣼⡝⠀⠀⢸⠘⠀⠀⠀⠀⠈⢿⠀⡟⡄⠹⣣⠀⠀⠐⠀⢸⡘⡄⣤⠀⡼⠁⠀⢺⡘⠉⠀⠀⠀⠫⣪⣌⡌⢳⡻⣦⠀⠀⢃⡽⡼⡀⠀⢣⢸⠸⡇
⢸⡸⢸⠀⠀⣿⠀⣇⢠⡿⠀⠀⠀⠸⡇⠀⠀⠀⠀⠀⠘⢇⠸⠘⡀⠻⣇⠀⠀⠄⠀⡇⢣⢛⠀⡇⠀⠀⣸⠇⠀⠀⠀⠀⠀⠘⠄⢻⡀⠻⣻⣧⠀⠀⠃⢧⡇⠀⢸⢸⡇⡇
⢸⡇⢸⣠⠀⣿⢠⣿⡾⠁⠀⢀⡀⠤⢇⣀⣐⣀⠀⠤⢀⠈⠢⡡⡈⢦⡙⣷⡀⠀⠀⢿⠈⢻⣡⠁⠀⢀⠏⠀⠀⠀⢀⠀⠄⣀⣐⣀⣙⠢⡌⣻⣷⡀⢹⢸⡅⠀⢸⠸⡇⡇
⢸⡇⢸⣟⠀⢿⢸⡿⠀⣀⣶⣷⣾⡿⠿⣿⣿⣿⣿⣿⣶⣬⡀⠐⠰⣄⠙⠪⣻⣦⡀⠘⣧⠀⠙⠄⠀⠀⠀⠀⠀⣨⣴⣾⣿⠿⣿⣿⣿⣿⣿⣶⣯⣿⣼⢼⡇⠀⢸⡇⡇⠇
⢸⢧⠀⣿⡅⢸⣼⡷⣾⣿⡟⠋⣿⠓⢲⣿⣿⣿⡟⠙⣿⠛⢯⡳⡀⠈⠓⠄⡈⠚⠿⣧⣌⢧⠀⠀⠀⠀⠀⣠⣺⠟⢫⡿⠓⢺⣿⣿⣿⠏⠙⣏⠛⣿⣿⣾⡇⢀⡿⢠⠀⡇
⢸⢸⠀⢹⣷⡀⢿⡁⠀⠻⣇⠀⣇⠀⠘⣿⣿⡿⠁⠐⣉⡀⠀⠁⠀⠀⠀⠀⠀⠀⠀⠀⠉⠓⠳⠄⠀⠀⠀⠀⠋⠀⠘⡇⠀⠸⣿⣿⠟⠀⢈⣉⢠⡿⠁⣼⠁⣼⠃⣼⠀⡇
⢸⠸⣀⠈⣯⢳⡘⣇⠀⠀⠈⡂⣜⣆⡀⠀⠀⢀⣀⡴⠇⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢽⣆⣀⠀⠀⠀⣀⣜⠕⡊⠀⣸⠇⣼⡟⢠⠏⠀⡇
⢸⠀⡟⠀⢸⡆⢹⡜⡆⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⢠⠋⣾⡏⡇⡎⡇⠀⡇
⢸⠀⢃⡆⠀⢿⡄⠑⢽⣄⠀⠀⠀⢀⠂⠠⢁⠈⠄⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠠⠂⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⡀⠀⠄⡐⢀⠂⠀⠀⣠⣮⡟⢹⣯⣸⣱⠁⠀⡇
⠈⠉⠉⠉⠉⠉⠉⠉⠉⠉⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠉⠉⠉⠉⠉⠉⠉⠉⠁\`
\`\`\`


A tiny description.


## Features


- Item

- Item


### Usage


\`\`\`JavaScript
    import {} from '${packageName}';
\`\`\`
   
![image of banner](https://fakeimg.pl/730x380)
`;
        fs.writeFileSync(readMePath, readMeContent);
        console.log("Generated readme.md with cute defaults.");
    }
}

function createTestJs()
{

    const testJsPath = path.join(srcDirPath, 'test.js');
    if (!fs.existsSync(testJsPath)) {
        const testJsContent = `import { main } from './index.js';
main();
`;
        fs.writeFileSync(testJsPath, testJsContent);
        console.log("Generated test.js with test: npm run test");
    }
}

function createDotNpmrc()
{
    const npmrcPath = path.join(cwd, '.npmrc');
    if (!fs.existsSync(npmrcPath)) {
        fs.writeFileSync(npmrcPath, `package-lock=false`);
        console.log("Generated .npmrc");
    }
}

main();

