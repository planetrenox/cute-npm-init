#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function initializeProject() {
    const cwd = process.cwd();
    createPackageJson(cwd);
    createIndexJs(cwd);
    createNpmIgnore(cwd);
    createGitIgnore(cwd);
    console.log("Project initialization completed with cute-npm-init.");
}

function createPackageJson(cwd) {
    const projectName = path.basename(cwd);
    const packageJsonPath = path.join(cwd, 'package.json');
    if (!fs.existsSync(packageJsonPath)) {
        const packageJson = {
            name: projectName,
            version: "0.1.0",
            description: "Experimental piercer stronghold. No tests.",
            main: "index.js",
            bin: {
              [projectName]: "./index.js"
            },
            scripts: {"postinstall": "echo 'Customize this postinstall string in package.json'"},
            keywords: ["cute", "development", "deployment", "utility"],
            author: "",
            license: "CC-BY-4.0"
        };
        fs.writeFileSync(packageJsonPath, JSON.stringify(packageJson, null, 2));
        console.log("Generated package.json with cute defaults.");
    }
}

function createIndexJs(cwd) {
    const indexJsPath = path.join(cwd, 'index.js');
    if (!fs.existsSync(indexJsPath)) {
        const indexJsContent = `#!/usr/bin/env node
        
// require('dotenv').config(); // will parse EDIT_THIS_KEY= from .env at this dir level
// useage is process.env.EDIT_THIS_KEY
        
// Detect if being run directly from the CLI
if (require.main === module) {
    console.log("Hello from", "${path.basename(cwd)}!");
    // Add CLI specific code here
} else {
    module.exports = {  };
}
`;
        fs.writeFileSync(indexJsPath, indexJsContent);
        console.log("Generated index.js with CLI functionality.");
    }
}

function createNpmIgnore(cwd) {
    const npmIgnorePath = path.join(cwd, '.npmignore');
    if (!fs.existsSync(npmIgnorePath)) {
        const npmIgnoreContent = `**/.DS_Store
**/Thumbs.db
*.log
node_modules/
.env
coverage/
dist/
*.test.js
*.spec.js
tests/
__tests__/
test/
.git/
.github/
.gitlab/
.idea/
*.config.js
`;
        fs.writeFileSync(npmIgnorePath, npmIgnoreContent);
        console.log("Generated .npmignore with cute defaults.");
    }
}

function createGitIgnore(cwd) {
    const gitIgnorePath = path.join(cwd, '.gitignore');
    if (!fs.existsSync(gitIgnorePath)) {
        const gitIgnoreContent = `**/.git
        
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
lerna-debug.log*
.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# Snowpack dependency directory (https://snowpack.dev/)
web_modules/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional stylelint cache
.stylelintcache

# Microbundle cache
.rpt2_cache/
.rts2_cache_cjs/
.rts2_cache_es/
.rts2_cache_umd/

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env
.env.development.local
.env.test.local
.env.production.local
.env.local

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# Next.js build output
.next
out

# Nuxt.js build / generate output
.nuxt
dist

# Gatsby files
.cache/
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
.vuepress/dist

# vuepress v2.x temp and cache directory
.temp
.cache

# Docusaurus cache and generated files
.docusaurus

# Serverless directories
.serverless/

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# TernJS port file
.tern-port

# Stores VSCode versions used for testing VSCode extensions
.vscode-test

# yarn v2
.yarn/cache
.yarn/unplugged
.yarn/build-state.yml
.yarn/install-state.gz
.pnp.*
`;
        fs.writeFileSync(gitIgnorePath, gitIgnoreContent);
        console.log("Generated .gitignore with cute npm defaults.");
    }
}

// Detect if being run directly from the CLI
if (require.main === module) {
    initializeProject();
} else {
    module.exports = { initializeProject };
}
